#!/usr/bin/expect -f
#
# This Expect script was generated by autoexpect on Wed Aug  5 09:46:08 2020
# Expect and autoexpect were both written by Don Libes, NIST.
#
# Note that autoexpect does not guarantee a working script.  It
# necessarily has to guess about certain things.  Two reasons a script
# might fail are:
#
# 1) timing - A surprising number of programs (rn, ksh, zsh, telnet,
# etc.) and devices discard or ignore keystrokes that arrive "too
# quickly" after prompts.  If you find your new script hanging up at
# one spot, try adding a short sleep just before the previous send.
# Setting "force_conservative" to 1 (see below) makes Expect do this
# automatically - pausing briefly before sending each character.  This
# pacifies every program I know of.  The -c flag makes the script do
# this in the first place.  The -C flag allows you to define a
# character to toggle this mode off and on.

set force_conservative 0  ;# set to 1 to force conservative mode even if
			  ;# script wasn't run conservatively originally
if {$force_conservative} {
	set send_slow {1 .1}
	proc send {ignore arg} {
		sleep .1
		exp_send -s -- $arg
	}
}

#
# 2) differing output - Some programs produce different output each time
# they run.  The "date" command is an obvious example.  Another is
# ftp, if it produces throughput statistics at the end of a file
# transfer.  If this causes a problem, delete these patterns or replace
# them with wildcards.  An alternative is to use the -p flag (for
# "prompt") which makes Expect only look for the last line of output
# (i.e., the prompt).  The -P flag allows you to define a character to
# toggle this mode off and on.
#
# Read the man page for more info.
#
# -Don


set timeout -1
spawn $env(SHELL)
match_max 100000
expect -exact "\]0;production@production-desktop: ~/hw_test/tools/EKit_L/release/X64\[01;32mproduction@production-desktop\[00m:\[01;34m~/hw_test/tools/EKit_L/release/X64\[00m\$ "
send -- "sudo ./D	"
expect -exact "MCT"
send -- "\r"
expect -exact "\r
DMCT 1.20T01 on AIL\r
Select function.\r
  ( 1) System Info.\r
  ( 2) DDM Config Info.\r
  ( 3) Health Monitoring.\r
  ( 4) POE Config Info & Monitoring.\r
  ( 5) miniPCIe Config Info.\r
  ( 6) COM Config Info.\r
  ( 7) WDT Config Info & Monitoring.\r
  ( 8) Power Config Info.\r
  ( 9) USB Config Info.\r
  (10) Fan Config Info & Monitoring.\r
  (11) IO (DIO/IDIO) Status & Config Info.\r
(Q)uit the procedure\r
(Exit) the program\r
"
send -- "2\r"
expect -exact "2\r
Select sub-function.\r
  ( 1) User String Config Info.\r
  ( 2) User String Config Setup.\r
  ( 3) DDM Page Config Info.\r
  ( 4) DDM Page Config Setup.\r
(Q)uit the procedure\r
(Exit) the program\r
"
send -- "3\r"
expect -exact "3\r
DDM Config:\r
  Page  1 Logo          None     Sequence: 0 \r
  Page  2 User String   Display  Sequence: 1 \r
  Page  3 Temperature   Display  Sequence: 2 \r
  Page  4 POE           Display  Sequence: 3 \r
  Page  5 System Power  Display  Sequence: 4 \r
  Page  6 SIM Card      Display  Sequence: 5 \r
  Page  7 Product Name  Display  Sequence: 6 \r
  Page  8 AIC Version   Display  Sequence: 7 \r
  Page  9 FAN           Display  Sequence: 8 \r
  Page 10 Voltage       Display  Sequence: 9 \r
(Q)uit the procedure\r
(Exit) the program\r
"
send -- "exit\r"
expect -exact "exit\r
\]0;production@production-desktop: ~/hw_test/tools/EKit_L/release/X64\[01;32mproduction@production-desktop\[00m:\[01;34m~/hw_test/tools/EKit_L/release/X64\[00m\$ "
send -- ""
expect eof
